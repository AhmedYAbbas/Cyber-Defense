using System;
using System.Collections;
using Photon.Pun;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class Malware : MonoBehaviourPun
{
    // Private
    [SerializeField] private MalwareData _malwareData;
    private NavMeshAgent _malwareAgent;


    // Public 
    [HideInInspector] public string Name;
    [HideInInspector] public int AttackDamage;
    [HideInInspector] public float MovementSpeed;
    [HideInInspector] public float Health;
    [HideInInspector] public int Shield;
    [HideInInspector] public int EnergyCost;
    [HideInInspector] public bool IsRanged;
    private float _currentHealth;
    [SerializeField] private GameObject targetingSystem;
    [SerializeField] private Slider healthBarSlider;

    void Start()
    {
        _malwareAgent = GetComponent<NavMeshAgent>();
        name = _malwareData.MalwareName;
        AttackDamage = _malwareData.AttackDamage;
        MovementSpeed = _malwareData.MovementSpeed;
        EnergyCost = _malwareData.EnergyCost;
        Health = (float)_malwareData.Health;
        Shield = _malwareData.Shield;
        IsRanged = _malwareData.IsRanged;
        _malwareAgent.speed = MovementSpeed;
        //_currentHealth = Health;
        _currentHealth = Health;
        healthBarSlider.value = 1;
        healthBarSlider.gameObject.SetActive(false);
    }

    private void OnEnable()
    {
        _currentHealth = Health;
        healthBarSlider.value = 1;
        targetingSystem.SetActive(true);
    }

    private void OnDisable()
    {
        targetingSystem.SetActive(false);
    }

    public void DamageMalware(int dmg)
    {
        _currentHealth -= dmg;
        UpdateHealthBar();
        CheckMalwareHealth();
        photonView.RPC("SyncMalwareHealth", RpcTarget.Others, _currentHealth);
    }
    void CheckMalwareHealth()
    {
        if (_currentHealth <= 0)
        {
            gameObject.SetActive(false);
        }
    }
    
    [PunRPC]
    private void SyncMalwareHealth(float health)
    {
        _currentHealth = health;
        UpdateHealthBar();
        CheckMalwareHealth();
    }

    private void UpdateHealthBar()
    {
        float healthPercentage = (_currentHealth / Health) * 100;
        healthBarSlider.value = healthPercentage / 100;
        if (gameObject.activeInHierarchy)
        {
            StartCoroutine(ShowTheHealthBar());
        }
    }

    IEnumerator ShowTheHealthBar()
    {
        healthBarSlider.gameObject.SetActive(true);
        yield return new WaitForSeconds(3f);
        healthBarSlider.gameObject.SetActive(false);
    }
}